//
//  LiveCameraRouletteView.swift
//  UnluckyDraw
//
//  Created on 2025-06-16
//

import SwiftUI
import AVFoundation
import Vision

struct LiveCameraRouletteView: View {
    @Environment(\.dismiss) private var dismiss
    @StateObject private var liveCameraController = LiveCameraRouletteController()
    
    @State private var showingResult = false
    @State private var winner: DetectedFace?
    
    var body: some View {
        ZStack {
            // 배경색
            Color.black.ignoresSafeArea()
            
            VStack(spacing: 0) {
                // Navigation Bar
                HStack {
                    Button(action: { dismiss() }) {
                        Image(systemName: "xmark")
                            .font(.title2)
                            .foregroundColor(.white)
                    }
                    
                    Spacer()
                    
                    Text("Live Camera Draw")
                        .font(.headline)
                        .fontWeight(.semibold)
                        .foregroundColor(.white)
                    
                    Spacer()
                    
                    Button(action: { 
                        liveCameraController.toggleCamera()
                    }) {
                        Image(systemName: "camera.rotate.fill")
                            .font(.title2)
                            .foregroundColor(.white)
                    }
                }
                .padding()
                .background(Color.black.opacity(0.7))
                
                // 메인 카메라 + 오버레이 영역
                GeometryReader { geometry in
                    ZStack {
                        // 카메라 권한 상태에 따른 표시
                        switch liveCameraController.cameraPermissionStatus {
                        case .granted:
                            // 실시간 카메라 피드
                            LiveCameraPreview(controller: liveCameraController)
                                .clipShape(RoundedRectangle(cornerRadius: 12))
                                .overlay(
                                    RoundedRectangle(cornerRadius: 12)
                                        .stroke(Color.gray.opacity(0.3), lineWidth: 1)
                                )
                        
                        case .denied, .restricted:
                            // 권한 거부됨
                            VStack(spacing: 16) {
                                Image(systemName: "camera.fill")
                                    .font(.system(size: 50))
                                    .foregroundColor(.gray)
                                
                                Text("Camera Access Required")
                                    .font(.headline)
                                    .foregroundColor(.white)
                                
                                Text("Please enable camera access in Settings to use this feature")
                                    .font(.caption)
                                    .foregroundColor(.gray)
                                    .multilineTextAlignment(.center)
                                    .padding(.horizontal)
                                
                                Button("Open Settings") {
                                    if let settingsUrl = URL(string: UIApplication.openSettingsURLString) {
                                        UIApplication.shared.open(settingsUrl)
                                    }
                                }
                                .foregroundColor(.primaryRed)
                                .padding()
                                .background(Color.white)
                                .cornerRadius(10)
                            }
                            .frame(maxWidth: .infinity, maxHeight: .infinity)
                            .background(Color.black)
                            .clipShape(RoundedRectangle(cornerRadius: 12))
                        
                        default:
                            // 로딩 중
                            VStack(spacing: 16) {
                                ProgressView()
                                    .scaleEffect(1.5)
                                    .tint(.white)
                                
                                Text("Initializing Camera...")
                                    .font(.headline)
                                    .foregroundColor(.white)
                            }
                            .frame(maxWidth: .infinity, maxHeight: .infinity)
                            .background(Color.black)
                            .clipShape(RoundedRectangle(cornerRadius: 12))
                        }
                        
                        // 얼굴 감지 오버레이 (권한이 있을 때만)
                        if liveCameraController.cameraPermissionStatus == .granted {
                            FaceTrackingOverlay(
                                detectedFaces: liveCameraController.detectedFaces,
                                currentHighlightedIndex: liveCameraController.currentHighlightedIndex,
                                isSpinning: liveCameraController.isSpinning,
                                previewSize: geometry.size,
                                cameraPosition: liveCameraController.cameraPosition
                            )
                            
                            // 룰렛 스피닝 이펙트
                            if liveCameraController.isSpinning {
                                SpinningEffectOverlay()
                            }
                            
                            // 당첨 확대 효과
                            if let winnerFace = liveCameraController.winner, !liveCameraController.isSpinning {
                                WinnerZoomOverlay(
                                    winner: winnerFace,
                                    previewSize: geometry.size,
                                    cameraPosition: liveCameraController.cameraPosition,
                                    capturedWinnerImage: liveCameraController.capturedWinnerImage
                                )
                            }
                        }
                    }
                }
                .padding(.horizontal, 16)
                
                // 하단 컨트롤 패널
                VStack(spacing: 16) {
                    // 상태 표시
                    HStack {
                        Circle()
                            .fill(liveCameraController.detectedFaces.isEmpty ? Color.gray : Color.green)
                            .frame(width: 8, height: 8)
                        
                        Text("\(liveCameraController.detectedFaces.count) faces detected")
                            .font(.caption)
                            .foregroundColor(.white)
                        
                        Spacer()
                        
                        // 룰렛 상태 표시
                        if liveCameraController.isSpinning {
                            HStack(spacing: 8) {
                                ProgressView()
                                    .scaleEffect(0.8)
                                    .tint(.highlightYellow)
                                
                                VStack(alignment: .leading, spacing: 2) {
                                    Text("🎰 DRAWING...")
                                        .font(.caption)
                                        .fontWeight(.bold)
                                        .foregroundColor(.highlightYellow)
                                    
                                    Text("Finding the unlucky one")
                                        .font(.caption2)
                                        .foregroundColor(.gray)
                                }
                            }
                        } else if liveCameraController.winner != nil {
                            HStack(spacing: 8) {
                                Text("🏆")
                                    .font(.title2)
                                
                                VStack(alignment: .leading, spacing: 2) {
                                    Text("WINNER SELECTED!")
                                        .font(.caption)
                                        .fontWeight(.bold)
                                        .foregroundColor(.highlightYellow)
                                    
                                    Text("Tap Reset to draw again")
                                        .font(.caption2)
                                        .foregroundColor(.gray)
                                }
                            }
                        }
                    }
                    
                    // 참가자 표시 (추첨 중이 아닐 때만)
                    if !liveCameraController.isSpinning && liveCameraController.detectedFaces.count > 1 && liveCameraController.winner == nil {
                        HStack(spacing: 8) {
                            Text("Participants:")
                                .font(.caption)
                                .foregroundColor(.gray)
                            
                            ForEach(0..<liveCameraController.detectedFaces.count, id: \.self) { index in
                                Circle()
                                    .fill(Color.primaryRed)
                                    .frame(width: 6, height: 6)
                            }
                            
                            Spacer()
                        }
                    }
                    
                    // 추첨 중 참가자 표시
                    if liveCameraController.isSpinning && liveCameraController.detectedFaces.count > 1 {
                        HStack(spacing: 8) {
                            Text("Drawing from:")
                                .font(.caption)
                                .foregroundColor(.gray)
                            
                            ForEach(0..<liveCameraController.detectedFaces.count, id: \.self) { index in
                                Circle()
                                    .fill(index == liveCameraController.currentHighlightedIndex ? 
                                          Color.highlightYellow : Color.gray.opacity(0.4))
                                    .frame(width: 8, height: 8)
                                    .scaleEffect(index == liveCameraController.currentHighlightedIndex ? 1.5 : 1.0)
                                    .animation(.easeInOut(duration: 0.2), value: liveCameraController.currentHighlightedIndex)
                            }
                            
                            Spacer()
                        }
                    }
                    
                    // 액션 버튼
                    HStack(spacing: 20) {
                        // 룰렛 시작/정지 버튼
                        Button(action: {
                            HapticManager.impact()
                            if liveCameraController.isSpinning {
                                liveCameraController.stopRoulette()
                            } else if liveCameraController.detectedFaces.count >= 2 && liveCameraController.winner == nil {
                                liveCameraController.startRoulette()
                            }
                        }) {
                            HStack(spacing: 8) {
                                if liveCameraController.isSpinning {
                                    Image(systemName: "stop.circle.fill")
                                    Text("Stop Draw")
                                } else {
                                    Image(systemName: "play.circle.fill")
                                    Text("Start Draw")
                                }
                            }
                            .foregroundColor(.white)
                            .font(.headline)
                            .padding(.vertical, 14)
                            .padding(.horizontal, 24)
                            .background(
                                getButtonBackgroundColor()
                            )
                            .cornerRadius(12)
                        }
                        .disabled(
                            (!liveCameraController.isSpinning && liveCameraController.detectedFaces.count < 2) ||
                            liveCameraController.winner != nil
                        )
                        
                        // 리셋 버튼
                        if liveCameraController.winner != nil {
                            Button(action: {
                                HapticManager.impact()
                                liveCameraController.reset()
                            }) {
                                HStack(spacing: 8) {
                                    Image(systemName: "arrow.clockwise")
                                    Text("Reset")
                                }
                                .foregroundColor(.white)
                                .font(.headline)
                                .padding(.vertical, 14)
                                .padding(.horizontal, 24)
                                .background(Color.gray)
                                .cornerRadius(12)
                            }
                        }
                    }
                    
                    // 안내 메시지
                    Group {
                        if liveCameraController.detectedFaces.isEmpty {
                            Text("📷 Position faces in the camera view")
                                .font(.caption)
                                .foregroundColor(.gray)
                                .multilineTextAlignment(.center)
                        } else if liveCameraController.detectedFaces.count == 1 {
                            Text("👥 Add more people to start the draw")
                                .font(.caption)
                                .foregroundColor(.gray)
                                .multilineTextAlignment(.center)
                        } else if liveCameraController.isSpinning {
                            Text("🎰 Drawing in progress... Wait for the result!")
                                .font(.caption)
                                .fontWeight(.medium)
                                .foregroundColor(.highlightYellow)
                                .multilineTextAlignment(.center)
                        } else if liveCameraController.winner != nil {
                            Text("🎉 Winner selected! Use Reset to draw again")
                                .font(.caption)
                                .fontWeight(.medium)
                                .foregroundColor(.highlightYellow)
                                .multilineTextAlignment(.center)
                        } else {
                            Text("✅ Ready to draw! Tap Start Draw to begin")
                                .font(.caption)
                                .fontWeight(.medium)
                                .foregroundColor(.winnerGreen)
                                .multilineTextAlignment(.center)
                        }
                    }
                }
                .padding()
                .background(Color.black.opacity(0.8))
            }
        }
        .navigationBarHidden(true)
        .onAppear {
            liveCameraController.startCamera()
        }
        .onDisappear {
            liveCameraController.stopCamera()
        }
    }
    
    // MARK: - Helper Functions
    private func getButtonBackgroundColor() -> Color {
        if liveCameraController.isSpinning {
            return Color.primaryOrange
        } else if liveCameraController.detectedFaces.count >= 2 && liveCameraController.winner == nil {
            return Color.primaryRed
        } else {
            return Color.gray
        }
    }
}

// MARK: - Live Camera Preview
struct LiveCameraPreview: UIViewRepresentable {
    let controller: LiveCameraRouletteController
    
    func makeUIView(context: Context) -> UIView {
        let view = UIView()
        view.backgroundColor = UIColor.black
        
        // previewLayer가 준비될 때까지 기다림
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
            self.setupPreviewLayer(in: view)
        }
        
        return view
    }
    
    func updateUIView(_ uiView: UIView, context: Context) {
        // 레이어 프레임 업데이트
        DispatchQueue.main.async {
            if let previewLayer = controller.previewLayer {
                previewLayer.frame = uiView.bounds
                
                // 레이어가 아직 추가되지 않았다면 추가
                if previewLayer.superlayer == nil {
                    uiView.layer.addSublayer(previewLayer)
                }
            }
        }
    }
    
    private func setupPreviewLayer(in view: UIView) {
        guard let previewLayer = controller.previewLayer else {
            print("❌ PreviewLayer is nil")
            return
        }
        
        // 기존 레이어 제거
        view.layer.sublayers?.removeAll()
        
        // 새 레이어 설정
        previewLayer.frame = view.bounds
        previewLayer.videoGravity = .resizeAspectFill
        view.layer.addSublayer(previewLayer)
        
        print("✅ PreviewLayer added to view")
    }
}

// MARK: - Face Tracking Overlay
struct FaceTrackingOverlay: View {
    let detectedFaces: [DetectedFace]
    let currentHighlightedIndex: Int
    let isSpinning: Bool
    let previewSize: CGSize
    let cameraPosition: AVCaptureDevice.Position
    
    var body: some View {
        ZStack {
            ForEach(Array(detectedFaces.enumerated()), id: \.element.id) { index, face in
                LiveFaceOverlay(
                    face: face,
                    index: index,
                    isHighlighted: index == currentHighlightedIndex,
                    isSpinning: isSpinning,
                    previewSize: previewSize,
                    cameraPosition: cameraPosition
                )
            }
        }
    }
}

// MARK: - Live Face Overlay
struct LiveFaceOverlay: View {
    let face: DetectedFace
    let index: Int
    let isHighlighted: Bool
    let isSpinning: Bool
    let previewSize: CGSize
    let cameraPosition: AVCaptureDevice.Position
    
    var body: some View {
        let convertedBox = convertVisionToPreviewRect(face.boundingBox, previewSize: previewSize, cameraPosition: cameraPosition)
        
        ZStack {
            // 기본 얼굴 사각형 (항상 표시)
            if !isSpinning {
                Rectangle()
                    .stroke(Color.primaryRed.opacity(0.7), lineWidth: 2)
                    .background(Color.primaryRed.opacity(0.05))
                    .frame(width: convertedBox.width, height: convertedBox.height)
                    .position(x: convertedBox.midX, y: convertedBox.midY)
                
                // 얼굴 번호
                Text("\(index + 1)")
                    .font(.system(size: 12, weight: .bold))
                    .foregroundColor(.white)
                    .padding(6)
                    .background(
                        Circle()
                            .fill(Color.primaryRed)
                            .shadow(color: .black.opacity(0.3), radius: 2)
                    )
                    .position(
                        x: convertedBox.minX + 15,
                        y: convertedBox.minY + 15
                    )
            }
            
            // 추첨 중일 때만 하이라이트 표시
            if isSpinning && isHighlighted {
                // 메인 하이라이트 사각형
                Rectangle()
                    .stroke(Color.highlightYellow, lineWidth: 4)
                    .background(Color.highlightYellow.opacity(0.2))
                    .frame(width: convertedBox.width * 1.2, height: convertedBox.height * 1.2)
                    .position(x: convertedBox.midX, y: convertedBox.midY)
                    .scaleEffect(1.05)
                
                // 펜싱 테두리
                Rectangle()
                    .stroke(Color.highlightYellow, lineWidth: 2)
                    .frame(width: convertedBox.width * 1.3, height: convertedBox.height * 1.3)
                    .position(x: convertedBox.midX, y: convertedBox.midY)
                    .opacity(0.6)
                    .scaleEffect(1.1)
                    .animation(.easeInOut(duration: 0.3).repeatForever(autoreverses: true), value: isHighlighted)
                
                // 하이라이트된 번호
                Text("\(index + 1)")
                    .font(.system(size: 16, weight: .black))
                    .foregroundColor(.black)
                    .padding(8)
                    .background(
                        Circle()
                            .fill(Color.highlightYellow)
                            .shadow(color: .highlightYellow.opacity(0.5), radius: 4)
                    )
                    .position(
                        x: convertedBox.minX + 20,
                        y: convertedBox.minY + 20
                    )
                    .scaleEffect(1.2)
            }
        }
    }
    
    // Vision 좌표를 미리보기 좌표로 정확히 변환
    private func convertVisionToPreviewRect(_ visionRect: CGRect, previewSize: CGSize, cameraPosition: AVCaptureDevice.Position) -> CGRect {
        // Vision 좌표는 (0,0)이 좌하단, UIKit은 좌상단
        var normalizedRect = visionRect
        
        // Y 좌표 변환 (좌하단 -> 좌상단)
        normalizedRect.origin.y = 1.0 - visionRect.origin.y - visionRect.size.height
        
        // 전면 카메라인 경우 X 좌표 미러링
        if cameraPosition == .front {
            normalizedRect.origin.x = 1.0 - visionRect.origin.x - visionRect.size.width
        }
        
        // 미리보기 크기에 맞게 스케일링
        return CGRect(
            x: normalizedRect.origin.x * previewSize.width,
            y: normalizedRect.origin.y * previewSize.height,
            width: normalizedRect.size.width * previewSize.width,
            height: normalizedRect.size.height * previewSize.height
        )
    }
}

// MARK: - Spinning Effect Overlay
struct SpinningEffectOverlay: View {
    @State private var rotationAngle: Double = 0
    
    var body: some View {
        ZStack {
            // 중앙 스피닝 인디케이터
            VStack(spacing: 8) {
                ZStack {
                    Circle()
                        .stroke(Color.highlightYellow.opacity(0.3), lineWidth: 3)
                        .frame(width: 60, height: 60)
                    
                    ForEach(0..<8) { index in
                        Rectangle()
                            .fill(Color.highlightYellow.opacity(0.8))
                            .frame(width: 2, height: 12)
                            .offset(y: -24)
                            .rotationEffect(.degrees(Double(index) * 45 + rotationAngle))
                    }
                }
                
                Text("🎰 Spinning...")
                    .font(.caption)
                    .fontWeight(.bold)
                    .foregroundColor(.highlightYellow)
                    .shadow(color: .black.opacity(0.5), radius: 2)
            }
        }
        .onAppear {
            withAnimation(.linear(duration: 0.8).repeatForever(autoreverses: false)) {
                rotationAngle = 360
            }
        }
    }
}

// MARK: - Winner Zoom Overlay
struct WinnerZoomOverlay: View {
    let winner: DetectedFace
    let previewSize: CGSize
    let cameraPosition: AVCaptureDevice.Position
    let capturedWinnerImage: UIImage?
    
    @State private var showAnimation = false
    @State private var scale: CGFloat = 0.8
    @State private var rotationAngle: Double = 0
    
    var body: some View {
        ZStack {
            // 반투명 배경
            Color.black.opacity(0.85)
                .ignoresSafeArea()
                .onTapGesture {
                    // 탭하면 효과 종료
                    withAnimation(.easeOut(duration: 0.3)) {
                        showAnimation = false
                    }
                }
            
            if showAnimation {
                VStack(spacing: 30) {
                    // 당첨 타이틀
                    VStack(spacing: 12) {
                        Text("🏆")
                            .font(.system(size: 50))
                            .scaleEffect(showAnimation ? 1.1 : 0.8)
                            .animation(.spring(response: 0.6, dampingFraction: 0.6), value: showAnimation)
                        
                        Text("UNLUCKY WINNER!")
                            .font(.title)
                            .fontWeight(.bold)
                            .foregroundColor(.primaryRed)
                            .scaleEffect(showAnimation ? 1.0 : 0.5)
                            .animation(.spring(response: 0.8, dampingFraction: 0.7).delay(0.2), value: showAnimation)
                    }
                    
                    // 대형 얼굴 이미지 (중앙 고정)
                    if let capturedFace = capturedWinnerImage {
                        VStack(spacing: 16) {
                            // 대형 얼굴 이미지
                            Image(uiImage: capturedFace)
                                .resizable()
                                .aspectRatio(contentMode: .fill)
                                .frame(width: 200, height: 200)
                                .clipShape(Circle())
                                .overlay(
                                    Circle()
                                        .stroke(
                                            LinearGradient(
                                                gradient: Gradient(colors: [.winnerGreen, .primaryOrange]),
                                                startPoint: .topLeading,
                                                endPoint: .bottomTrailing
                                            ),
                                            lineWidth: 8
                                        )
                                )
                                .shadow(color: .winnerGreen.opacity(0.5), radius: 20)
                                .scaleEffect(scale)
                                .overlay(
                                    // 크라운 오버레이
                                    Image(systemName: "crown.fill")
                                        .font(.system(size: 24))
                                        .foregroundColor(.primaryOrange)
                                        .rotationEffect(.degrees(rotationAngle))
                                        .shadow(color: .black.opacity(0.3), radius: 2)
                                        .offset(y: -120)
                                )
                            
                            // 당첨자 텍스트
                            Text("🏆 THE UNLUCKY ONE")
                                .font(.title2)
                                .fontWeight(.black)
                                .foregroundColor(.white)
                                .padding(.horizontal, 20)
                                .padding(.vertical, 10)
                                .background(
                                    Capsule()
                                        .fill(
                                            LinearGradient(
                                                gradient: Gradient(colors: [.primaryRed, .primaryOrange]),
                                                startPoint: .leading,
                                                endPoint: .trailing
                                            )
                                        )
                                        .shadow(color: .primaryRed.opacity(0.5), radius: 8)
                                )
                                .scaleEffect(scale)
                        }
                    } else {
                        // 얼굴 캡쳐 실패 시 기본 표시
                        VStack(spacing: 16) {
                            Circle()
                                .fill(Color.gray.opacity(0.3))
                                .frame(width: 200, height: 200)
                                .overlay(
                                    Image(systemName: "person.fill")
                                        .font(.system(size: 80))
                                        .foregroundColor(.gray)
                                )
                                .overlay(
                                    Circle()
                                        .stroke(Color.primaryRed, lineWidth: 8)
                                )
                                .scaleEffect(scale)
                            
                            Text("🏆 THE UNLUCKY ONE")
                                .font(.title2)
                                .fontWeight(.black)
                                .foregroundColor(.white)
                                .padding(.horizontal, 20)
                                .padding(.vertical, 10)
                                .background(
                                    Capsule()
                                        .fill(Color.primaryRed)
                                        .shadow(color: .primaryRed.opacity(0.5), radius: 8)
                                )
                                .scaleEffect(scale)
                        }
                    }
                    
                    Spacer()
                    
                    // 하단 안내 메시지
                    VStack(spacing: 12) {
                        Text("🎉 Congratulations! 🎉")
                            .font(.title2)
                            .fontWeight(.bold)
                            .foregroundColor(.highlightYellow)
                        
                        Text("Tap anywhere to continue or use Reset to draw again")
                            .font(.caption)
                            .foregroundColor(.gray)
                            .multilineTextAlignment(.center)
                    }
                    .padding(.bottom, 40)
                    .opacity(showAnimation ? 1.0 : 0.0)
                    .animation(.easeInOut.delay(0.8), value: showAnimation)
                }
                .transition(.opacity.combined(with: .scale))
            }
        }
        .onAppear {
            // 애니메이션 시작
            showAnimation = true
            
            // 성공 햄틱 피드백
            HapticManager.notification(.success)
            
            // 얼굴 확대 애니메이션
            withAnimation(.spring(response: 0.8, dampingFraction: 0.8, blendDuration: 0)) {
                scale = 1.0
            }
            
            // 크라운 회전 효과
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.8) {
                withAnimation(.easeInOut(duration: 4.0).repeatForever(autoreverses: true)) {
                    rotationAngle = 6
                }
            }
        }
    }
    
    // 라이브 카메라에서 얼굴 캡쳐
    private func captureWinnerFace() -> UIImage? {
        // 현재 사용할 수 있는 이미지가 없으므로 기본 표시를 사용
        // 나중에 실제 카메라 프레임에서 얼굴을 캡쳐하는 기능을 추가할 수 있음
        return nil
    }
}

#Preview {
    LiveCameraRouletteView()
}
